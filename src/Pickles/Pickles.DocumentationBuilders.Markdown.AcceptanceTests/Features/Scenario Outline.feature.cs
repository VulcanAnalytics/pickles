// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PicklesDoc.Pickles.DocumentationBuilders.Markdown.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Scenario Outlines")]
    public partial class ScenarioOutlinesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Scenario Outline.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Scenario Outlines", "    In order to document the Scenario Outlines\r\n    As a reader of the generated " +
                    "documentation\r\n    I want the scenario outlines to appear with steps and example" +
                    "s below the feature heading.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Output has simple scenario outline")]
        public virtual void OutputHasSimpleScenarioOutline()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Output has simple scenario outline", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("I have a feature called \'My Scenario Outline Feature\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
    testRunner.And("I have a scenario outline called \'Scenario Outline with Single Example\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Keyword",
                        "Step"});
            table1.AddRow(new string[] {
                        "Given",
                        "I have a simple given step for <data_one>"});
            table1.AddRow(new string[] {
                        "And",
                        "I have second given for <data_two>"});
#line 12
    testRunner.And("I have the scenario steps", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "data_one",
                        "data_two"});
            table2.AddRow(new string[] {
                        "First",
                        "one",
                        "wun"});
            table2.AddRow(new string[] {
                        "Second",
                        "two",
                        "too"});
            table2.AddRow(new string[] {
                        "Third",
                        "three",
                        "tree"});
#line 17
    testRunner.And("I have an examples table", ((string)(null)), table2, "And ");
#line 23
    testRunner.When("I generate Markdown output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table3.AddRow(new string[] {
                        "#### Scenario Outline: Scenario Outline with Single Example"});
            table3.AddRow(new string[] {
                        ">"});
            table3.AddRow(new string[] {
                        "> **Given** I have a simple given step for \\<data_one\\>"});
            table3.AddRow(new string[] {
                        ">"});
            table3.AddRow(new string[] {
                        "> **And** I have second given for \\<data_two\\>"});
            table3.AddRow(new string[] {
                        ">"});
            table3.AddRow(new string[] {
                        "> Examples:"});
            table3.AddRow(new string[] {
                        ">"});
            table3.AddRow(new string[] {
                        "> | Scenario | data_one | data_two |"});
            table3.AddRow(new string[] {
                        "> | --- | --- | --- |"});
            table3.AddRow(new string[] {
                        "> | First | one | wun |"});
            table3.AddRow(new string[] {
                        "> | Second | two | too |"});
            table3.AddRow(new string[] {
                        "> | Third | three | tree |"});
#line 25
    testRunner.Then("the Markdown output has the lines in the following order", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Output has table step scenario outline")]
        public virtual void OutputHasTableStepScenarioOutline()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Output has table step scenario outline", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 43
    testRunner.Given("I have a feature called \'My Scenario Outline Feature\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
    testRunner.And("I have a scenario outline called \'Scenario Outline with table step\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "TableColA",
                        "TableColb"});
            table4.AddRow(new string[] {
                        "<data_one>",
                        "TDB1"});
            table4.AddRow(new string[] {
                        "TDA2",
                        "<data_two>"});
#line 47
    testRunner.And("I have the scenario step with table \'Given I have a table\'", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Scenario",
                        "data_one",
                        "data_two"});
            table5.AddRow(new string[] {
                        "First",
                        "one",
                        "wun"});
            table5.AddRow(new string[] {
                        "Second",
                        "two",
                        "too"});
            table5.AddRow(new string[] {
                        "Third",
                        "three",
                        "tree"});
#line 52
    testRunner.And("I have an examples table", ((string)(null)), table5, "And ");
#line 58
    testRunner.When("I generate Markdown output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Content"});
            table6.AddRow(new string[] {
                        "#### Scenario Outline: Scenario Outline with table step"});
            table6.AddRow(new string[] {
                        ">"});
            table6.AddRow(new string[] {
                        "> **Given** I have a table"});
            table6.AddRow(new string[] {
                        ">"});
            table6.AddRow(new string[] {
                        "> | TableColA | TableColb |"});
            table6.AddRow(new string[] {
                        "> | --- | --- |"});
            table6.AddRow(new string[] {
                        "> | \\<data_one\\> | TDB1 |"});
            table6.AddRow(new string[] {
                        "> | TDA2 | \\<data_two\\> |"});
            table6.AddRow(new string[] {
                        ">"});
            table6.AddRow(new string[] {
                        "> Examples:"});
            table6.AddRow(new string[] {
                        ">"});
            table6.AddRow(new string[] {
                        "> | Scenario | data_one | data_two |"});
            table6.AddRow(new string[] {
                        "> | --- | --- | --- |"});
            table6.AddRow(new string[] {
                        "> | First | one | wun |"});
            table6.AddRow(new string[] {
                        "> | Second | two | too |"});
            table6.AddRow(new string[] {
                        "> | Third | three | tree |"});
#line 60
    testRunner.Then("the Markdown output has the lines in the following order", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
